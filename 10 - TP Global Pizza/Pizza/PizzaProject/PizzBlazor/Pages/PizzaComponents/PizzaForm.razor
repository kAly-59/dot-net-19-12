@using System.Text.RegularExpressions

@if (PizzaToEdit != null)
{
    <EditForm OnValidSubmit="SubmitPizza" Model="PizzaToEdit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group" style="width:100%">
                <label for="name">Nom:</label>
                <InputText class="form-control" id="name" placeholder="Saisir le nom" @bind-Value="PizzaToEdit.Name" />
                <small><ValidationMessage For="() => PizzaToEdit.Name" /></small>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group" style="width:100%">
                <label for="ingredients">Ingrédients (séparés par virgule):</label>
                <InputText class="form-control" id="ingredients" placeholder="Saisir les ingrédients" @bind-Value="PizzaToEdit.IngredientsString" />
                <small><ValidationMessage For="() => PizzaToEdit.IngredientsString" /></small>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group" style="width:100%">
                <label for="price">Prix (entier)</label>
                <InputNumber class="form-control" id="price" placeholder="Saisir le prix" @bind-Value="PizzaToEdit.Price" />
                <small><ValidationMessage For="() => PizzaToEdit.Price" /></small>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group" style="width:100%">
                <label for="imageLink">Lien vers l'image:</label>
                <InputText class="form-control" id="imageLink" placeholder="Saisir le lien vers l'image" @bind-Value="PizzaToEdit.ImageLink" />
                <small><ValidationMessage For="() => PizzaToEdit.ImageLink" /></small>
            </div>
        </div>
        <div class="form-row">
            <button type="submit" class="btn btn-primary">Validation</button>
        </div>
    </EditForm>
}

@code {
    [Inject]
    public IPizzaService PizzaService { get; set; }

    [Parameter]
    public EventCallback CallbackReload { get; set; }

    [Parameter]
    public PizzaEditDTO? PizzaToEdit { get; set; } = null; // la pizza que l'on cherche à modifier ou ajouter

    [Parameter]
    public EditionModes EditionMode { get; set; }

    private async Task SubmitPizza()
    {
        switch (EditionMode)
        {
            case EditionModes.Post:
                var pizza2 = new Pizza()
                    {
                        Name = PizzaToEdit!.Name,
                        Price = PizzaToEdit.Price,
                        ImageLink = Regex.Split(PizzaToEdit.ImageLink!, @"https:\/\/localhost:\d{1,4}").Last(),
                        Ingredients = PizzaToEdit.IngredientsString!.Split(",")
                            .Select(ingredient => new Ingredient() { Name = ingredient.Trim() })
                            .ToList()
                    };
                await PizzaService.Post(pizza2);
                break;
            case EditionModes.Put:
                var pizza = (await PizzaService.Get(PizzaToEdit!.Id))!;
                pizza.Name = PizzaToEdit!.Name;
                pizza.Price = PizzaToEdit.Price;
                pizza.ImageLink = Regex.Split(PizzaToEdit.ImageLink!, @"https:\/\/localhost:\d{1,4}").Last();
                pizza.Ingredients = PizzaToEdit.IngredientsString!.Split(",")
                    .Select(ingredient => new Ingredient() { PizzaId = pizza.Id, Name = ingredient.Trim() })
                    .ToList();
                await PizzaService.Put(pizza);
                break;
        }

        PizzaToEdit = null;

        await CallbackReload.InvokeAsync();
    }
}